/* The following code was generated by JFlex 1.4.3 on 04.01.12 15:39 */

/* It's an automatically generated code. Do not modify it. */
package org.xblackcat.frozenice;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 04.01.12 15:39 from the specification file
 * <tt>P:/learn.projects/FrozenIdea/src/java/org/xblackcat/frozenice/_IceLexer.flex</tt>
 */
class _IceLexer implements FlexLexer {
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\4\1\1\1\7\1\0\1\1\1\7\16\4\4\0\1\1\2\0" +
                    "\1\10\1\3\3\0\1\43\1\44\1\6\1\0\1\52\1\0\1\53" +
                    "\1\5\12\4\1\0\1\51\5\0\13\3\1\34\2\3\1\35\13\3" +
                    "\1\47\1\2\1\50\1\0\1\3\1\0\1\16\1\21\1\24\1\32" +
                    "\1\14\1\15\1\37\1\33\1\26\1\36\1\3\1\17\1\40\1\27" +
                    "\1\22\1\25\1\30\1\12\1\20\1\11\1\13\1\42\1\41\1\23" +
                    "\1\31\1\3\1\45\1\0\1\46\1\0\41\4\2\0\4\3\4\0" +
                    "\1\3\2\0\1\4\7\0\1\3\4\0\1\3\5\0\27\3\1\0" +
                    "\37\3\1\0\u013f\3\31\0\162\3\4\0\14\3\16\0\5\3\11\0" +
                    "\1\3\21\0\130\4\5\0\23\4\12\0\1\3\13\0\1\3\1\0" +
                    "\3\3\1\0\1\3\1\0\24\3\1\0\54\3\1\0\46\3\1\0" +
                    "\5\3\4\0\202\3\1\0\4\4\3\0\105\3\1\0\46\3\2\0" +
                    "\2\3\6\0\20\3\41\0\46\3\2\0\1\3\7\0\47\3\11\0" +
                    "\21\4\1\0\27\4\1\0\3\4\1\0\1\4\1\0\2\4\1\0" +
                    "\1\4\13\0\33\3\5\0\3\3\15\0\4\4\14\0\6\4\13\0" +
                    "\32\3\5\0\13\3\16\4\7\0\12\4\4\0\2\3\1\4\143\3" +
                    "\1\0\1\3\10\4\1\0\6\4\2\3\2\4\1\0\4\4\2\3" +
                    "\12\4\3\3\2\0\1\3\17\0\1\4\1\3\1\4\36\3\33\4" +
                    "\2\0\3\3\60\0\46\3\13\4\1\3\u014f\0\3\4\66\3\2\0" +
                    "\1\4\1\3\20\4\2\0\1\3\4\4\3\0\12\3\2\4\2\0" +
                    "\12\4\21\0\3\4\1\0\10\3\2\0\2\3\2\0\26\3\1\0" +
                    "\7\3\1\0\1\3\3\0\4\3\2\0\1\4\1\3\7\4\2\0" +
                    "\2\4\2\0\3\4\11\0\1\4\4\0\2\3\1\0\3\3\2\4" +
                    "\2\0\12\4\4\3\15\0\3\4\1\0\6\3\4\0\2\3\2\0" +
                    "\26\3\1\0\7\3\1\0\2\3\1\0\2\3\1\0\2\3\2\0" +
                    "\1\4\1\0\5\4\4\0\2\4\2\0\3\4\13\0\4\3\1\0" +
                    "\1\3\7\0\14\4\3\3\14\0\3\4\1\0\11\3\1\0\3\3" +
                    "\1\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4" +
                    "\1\3\10\4\1\0\3\4\1\0\3\4\2\0\1\3\17\0\2\3" +
                    "\2\4\2\0\12\4\1\0\1\3\17\0\3\4\1\0\10\3\2\0" +
                    "\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0" +
                    "\1\4\1\3\6\4\3\0\2\4\2\0\3\4\10\0\2\4\4\0" +
                    "\2\3\1\0\3\3\4\0\12\4\1\0\1\3\20\0\1\4\1\3" +
                    "\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3" +
                    "\1\0\2\3\3\0\2\3\3\0\3\3\3\0\10\3\1\0\3\3" +
                    "\4\0\5\4\3\0\3\4\1\0\4\4\11\0\1\4\17\0\11\4" +
                    "\11\0\1\3\7\0\3\4\1\0\10\3\1\0\3\3\1\0\27\3" +
                    "\1\0\12\3\1\0\5\3\4\0\7\4\1\0\3\4\1\0\4\4" +
                    "\7\0\2\4\11\0\2\3\4\0\12\4\22\0\2\4\1\0\10\3" +
                    "\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3\2\0\1\4" +
                    "\1\3\7\4\1\0\3\4\1\0\4\4\7\0\2\4\7\0\1\3" +
                    "\1\0\2\3\4\0\12\4\22\0\2\4\1\0\10\3\1\0\3\3" +
                    "\1\0\27\3\1\0\20\3\4\0\6\4\2\0\3\4\1\0\4\4" +
                    "\11\0\1\4\10\0\2\3\4\0\12\4\22\0\2\4\1\0\22\3" +
                    "\3\0\30\3\1\0\11\3\1\0\1\3\2\0\7\3\3\0\1\4" +
                    "\4\0\6\4\1\0\1\4\1\0\10\4\22\0\2\4\15\0\60\3" +
                    "\1\4\2\3\7\4\4\0\10\3\10\4\1\0\12\4\47\0\2\3" +
                    "\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3" +
                    "\1\0\7\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3" +
                    "\1\0\4\3\1\4\2\3\6\4\1\0\2\4\1\3\2\0\5\3" +
                    "\1\0\1\3\1\0\6\4\2\0\12\4\2\0\2\3\42\0\1\3" +
                    "\27\0\2\4\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4" +
                    "\4\0\2\4\10\3\1\0\42\3\6\0\24\4\1\0\2\4\4\3" +
                    "\4\0\10\4\1\0\44\4\11\0\1\4\71\0\42\3\1\0\5\3" +
                    "\1\0\2\3\1\0\7\4\3\0\4\4\6\0\12\4\6\0\6\3" +
                    "\4\4\106\0\46\3\12\0\51\3\7\0\132\3\5\0\104\3\5\0" +
                    "\122\3\6\0\7\3\1\0\77\3\1\0\1\3\1\0\4\3\2\0" +
                    "\7\3\1\0\1\3\1\0\4\3\2\0\47\3\1\0\1\3\1\0" +
                    "\4\3\2\0\37\3\1\0\1\3\1\0\4\3\2\0\7\3\1\0" +
                    "\1\3\1\0\4\3\2\0\7\3\1\0\7\3\1\0\27\3\1\0" +
                    "\37\3\1\0\1\3\1\0\4\3\2\0\7\3\1\0\47\3\1\0" +
                    "\23\3\16\0\11\4\56\0\125\3\14\0\u026c\3\2\0\10\3\12\0" +
                    "\32\3\5\0\113\3\3\0\3\3\17\0\15\3\1\0\4\3\3\4" +
                    "\13\0\22\3\3\4\13\0\22\3\2\4\14\0\15\3\1\0\3\3" +
                    "\1\0\2\4\14\0\64\3\40\4\3\0\1\3\3\0\2\3\1\4" +
                    "\2\0\12\4\41\0\3\4\2\0\12\4\6\0\130\3\10\0\51\3" +
                    "\1\4\126\0\35\3\3\0\14\4\4\0\14\4\12\0\12\4\36\3" +
                    "\2\0\5\3\u038b\0\154\3\224\0\234\3\4\0\132\3\6\0\26\3" +
                    "\2\0\6\3\2\0\46\3\2\0\6\3\2\0\10\3\1\0\1\3" +
                    "\1\0\1\3\1\0\1\3\1\0\37\3\2\0\65\3\1\0\7\3" +
                    "\1\0\1\3\3\0\3\3\1\0\7\3\3\0\4\3\2\0\6\3" +
                    "\4\0\15\3\5\0\3\3\1\0\7\3\17\0\4\4\32\0\5\4" +
                    "\20\0\2\3\23\0\1\3\13\0\4\4\6\0\6\4\1\0\1\3" +
                    "\15\0\1\3\40\0\22\3\36\0\15\4\4\0\1\4\3\0\6\4" +
                    "\27\0\1\3\4\0\1\3\2\0\12\3\1\0\1\3\3\0\5\3" +
                    "\6\0\1\3\1\0\1\3\1\0\1\3\1\0\4\3\1\0\3\3" +
                    "\1\0\7\3\3\0\3\3\5\0\5\3\26\0\44\3\u0e81\0\3\3" +
                    "\31\0\11\3\6\4\1\0\5\3\2\0\5\3\4\0\126\3\2\0" +
                    "\2\4\2\0\3\3\1\0\137\3\5\0\50\3\4\0\136\3\21\0" +
                    "\30\3\70\0\20\3\u0200\0\u19b6\3\112\0\u51a6\3\132\0\u048d\3\u0773\0" +
                    "\u2ba4\3\u215c\0\u012e\3\2\0\73\3\225\0\7\3\14\0\5\3\5\0" +
                    "\1\3\1\4\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0" +
                    "\2\3\1\0\2\3\1\0\154\3\41\0\u016b\3\22\0\100\3\2\0" +
                    "\66\3\50\0\15\3\3\0\20\4\20\0\4\4\17\0\2\3\30\0" +
                    "\3\3\31\0\1\3\6\0\5\3\1\0\207\3\2\0\1\4\4\0" +
                    "\1\3\13\0\12\4\7\0\32\3\4\0\1\3\1\0\32\3\12\0" +
                    "\132\3\3\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3\3\0" +
                    "\2\3\3\0\2\3\22\0\3\4\4\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\16\3" +
                    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14" +
                    "\1\15\1\16\1\17\30\3\1\0\1\17\16\3\1\20" +
                    "\2\3\1\21\10\3\1\22\1\0\1\23\3\3\1\24" +
                    "\3\3\1\25\4\3\1\26\1\27\12\3\1\30\1\17" +
                    "\3\3\1\31\1\32\1\33\3\3\1\34\1\35\1\36" +
                    "\10\3\1\37\2\3\1\40\1\41\4\3\1\42\2\3" +
                    "\1\43\1\44\1\45\10\3\1\46\5\3\1\47\1\50" +
                    "\4\3\1\51\1\52\1\53\1\3\1\54";

    private static int[] zzUnpackAction() {
        int[] result = new int[173];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134" +
                    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294" +
                    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\54\0\54\0\54" +
                    "\0\54\0\54\0\54\0\54\0\54\0\u039c\0\u03c8\0\u03f4" +
                    "\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554" +
                    "\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4" +
                    "\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814" +
                    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974" +
                    "\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4" +
                    "\0\260\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08" +
                    "\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\54\0\u0ce4\0\260\0\u0d10" +
                    "\0\u0d3c\0\u0d68\0\260\0\u0d94\0\u0dc0\0\u0dec\0\260\0\u0e18" +
                    "\0\u0e44\0\u0e70\0\u0e9c\0\260\0\260\0\u0ec8\0\u0ef4\0\u0f20" +
                    "\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\260" +
                    "\0\54\0\u1080\0\u10ac\0\u10d8\0\260\0\260\0\260\0\u1104" +
                    "\0\u1130\0\u115c\0\260\0\260\0\260\0\u1188\0\u11b4\0\u11e0" +
                    "\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\260\0\u12e8\0\u1314" +
                    "\0\260\0\260\0\u1340\0\u136c\0\u1398\0\u13c4\0\260\0\u13f0" +
                    "\0\u141c\0\260\0\260\0\260\0\u1448\0\u1474\0\u14a0\0\u14cc" +
                    "\0\u14f8\0\u1524\0\u1550\0\u157c\0\260\0\u15a8\0\u15d4\0\u1600" +
                    "\0\u162c\0\u1658\0\260\0\260\0\u1684\0\u16b0\0\u16dc\0\u1708" +
                    "\0\260\0\260\0\260\0\u1734\0\260";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[173];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\2\1\6\1\2\1\3" +
                    "\1\7\1\10\2\5\1\11\1\12\1\5\1\13\1\14" +
                    "\1\15\1\16\1\5\1\17\1\5\1\20\3\5\1\21" +
                    "\1\5\1\22\1\23\2\5\1\24\1\5\1\25\1\26" +
                    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36" +
                    "\55\0\1\3\5\0\1\3\47\0\1\5\5\0\32\5" +
                    "\14\0\2\5\4\0\32\5\16\0\1\37\1\40\45\0" +
                    "\7\7\1\0\44\7\3\0\2\5\4\0\1\5\1\41" +
                    "\20\5\1\42\7\5\14\0\2\5\4\0\12\5\1\43" +
                    "\3\5\1\44\13\5\14\0\2\5\4\0\5\5\1\45" +
                    "\1\46\23\5\14\0\2\5\4\0\11\5\1\47\20\5" +
                    "\14\0\2\5\4\0\1\50\2\5\1\51\16\5\1\52" +
                    "\7\5\14\0\2\5\4\0\11\5\1\53\6\5\1\54" +
                    "\11\5\14\0\2\5\4\0\2\5\1\55\27\5\14\0" +
                    "\2\5\4\0\6\5\1\56\2\5\1\57\20\5\14\0" +
                    "\2\5\4\0\16\5\1\60\2\5\1\61\5\5\1\62" +
                    "\2\5\14\0\2\5\4\0\11\5\1\63\3\5\1\64" +
                    "\14\5\14\0\2\5\4\0\11\5\1\65\20\5\14\0" +
                    "\2\5\4\0\10\5\1\66\21\5\14\0\2\5\4\0" +
                    "\11\5\1\67\20\5\14\0\2\5\4\0\11\5\1\70" +
                    "\20\5\64\0\1\71\7\37\1\0\44\37\6\72\1\0" +
                    "\45\72\3\0\2\5\4\0\2\5\1\73\27\5\14\0" +
                    "\2\5\4\0\1\5\1\74\30\5\14\0\2\5\4\0" +
                    "\1\75\12\5\1\76\16\5\14\0\2\5\4\0\2\5" +
                    "\1\77\27\5\14\0\2\5\4\0\6\5\1\100\23\5" +
                    "\14\0\2\5\4\0\11\5\1\101\20\5\14\0\2\5" +
                    "\4\0\13\5\1\102\2\5\1\103\13\5\14\0\2\5" +
                    "\4\0\1\5\1\104\30\5\14\0\2\5\4\0\17\5" +
                    "\1\105\12\5\14\0\2\5\4\0\11\5\1\106\20\5" +
                    "\14\0\2\5\4\0\11\5\1\107\20\5\14\0\2\5" +
                    "\4\0\1\110\31\5\14\0\2\5\4\0\1\111\31\5" +
                    "\14\0\2\5\4\0\5\5\1\112\24\5\14\0\2\5" +
                    "\4\0\16\5\1\113\13\5\14\0\2\5\4\0\1\114" +
                    "\31\5\14\0\2\5\4\0\3\5\1\115\26\5\14\0" +
                    "\2\5\4\0\14\5\1\116\15\5\14\0\2\5\4\0" +
                    "\2\5\1\117\27\5\14\0\2\5\4\0\13\5\1\120" +
                    "\16\5\14\0\2\5\4\0\13\5\1\121\16\5\14\0" +
                    "\2\5\4\0\25\5\1\122\4\5\14\0\2\5\4\0" +
                    "\21\5\1\123\10\5\14\0\2\5\4\0\15\5\1\124" +
                    "\14\5\64\0\1\125\6\72\1\126\45\72\3\0\2\5" +
                    "\4\0\3\5\1\127\26\5\14\0\2\5\4\0\11\5" +
                    "\1\130\20\5\14\0\2\5\4\0\3\5\1\131\26\5" +
                    "\14\0\2\5\4\0\3\5\1\132\26\5\14\0\2\5" +
                    "\4\0\27\5\1\133\2\5\14\0\2\5\4\0\7\5" +
                    "\1\134\22\5\14\0\2\5\4\0\5\5\1\135\24\5" +
                    "\14\0\2\5\4\0\5\5\1\136\24\5\14\0\2\5" +
                    "\4\0\26\5\1\137\3\5\14\0\2\5\4\0\2\5" +
                    "\1\140\12\5\1\141\14\5\14\0\2\5\4\0\2\5" +
                    "\1\142\27\5\14\0\2\5\4\0\1\5\1\143\30\5" +
                    "\14\0\2\5\4\0\6\5\1\144\23\5\14\0\2\5" +
                    "\4\0\3\5\1\145\26\5\14\0\2\5\4\0\7\5" +
                    "\1\146\22\5\14\0\2\5\4\0\7\5\1\147\22\5" +
                    "\14\0\2\5\4\0\3\5\1\150\26\5\14\0\2\5" +
                    "\4\0\27\5\1\151\2\5\14\0\2\5\4\0\6\5" +
                    "\1\152\23\5\14\0\2\5\4\0\10\5\1\153\21\5" +
                    "\14\0\2\5\4\0\1\154\31\5\14\0\2\5\4\0" +
                    "\5\5\1\155\24\5\14\0\2\5\4\0\3\5\1\156" +
                    "\26\5\14\0\2\5\4\0\2\5\1\157\27\5\14\0" +
                    "\2\5\4\0\21\5\1\160\10\5\11\0\5\72\1\161" +
                    "\1\126\45\72\3\0\2\5\4\0\30\5\1\162\1\5" +
                    "\14\0\2\5\4\0\16\5\1\163\13\5\14\0\2\5" +
                    "\4\0\14\5\1\164\15\5\14\0\2\5\4\0\3\5" +
                    "\1\165\26\5\14\0\2\5\4\0\1\166\31\5\14\0" +
                    "\2\5\4\0\6\5\1\167\23\5\14\0\2\5\4\0" +
                    "\13\5\1\170\16\5\14\0\2\5\4\0\16\5\1\171" +
                    "\13\5\14\0\2\5\4\0\3\5\1\172\26\5\14\0" +
                    "\2\5\4\0\1\173\31\5\14\0\2\5\4\0\7\5" +
                    "\1\174\22\5\14\0\2\5\4\0\1\175\31\5\14\0" +
                    "\2\5\4\0\1\5\1\176\30\5\14\0\2\5\4\0" +
                    "\14\5\1\177\15\5\14\0\2\5\4\0\3\5\1\200" +
                    "\26\5\14\0\2\5\4\0\6\5\1\201\23\5\14\0" +
                    "\2\5\4\0\15\5\1\202\14\5\14\0\2\5\4\0" +
                    "\6\5\1\203\23\5\14\0\2\5\4\0\13\5\1\204" +
                    "\16\5\14\0\2\5\4\0\6\5\1\205\23\5\14\0" +
                    "\2\5\4\0\7\5\1\206\22\5\14\0\2\5\4\0" +
                    "\21\5\1\207\10\5\14\0\2\5\4\0\1\210\31\5" +
                    "\14\0\2\5\4\0\1\211\31\5\14\0\2\5\4\0" +
                    "\26\5\1\212\3\5\14\0\2\5\4\0\16\5\1\213" +
                    "\13\5\14\0\2\5\4\0\4\5\1\214\25\5\14\0" +
                    "\2\5\4\0\11\5\1\215\20\5\14\0\2\5\4\0" +
                    "\27\5\1\216\2\5\14\0\2\5\4\0\3\5\1\217" +
                    "\26\5\14\0\2\5\4\0\11\5\1\220\20\5\14\0" +
                    "\2\5\4\0\24\5\1\221\5\5\14\0\2\5\4\0" +
                    "\1\222\31\5\14\0\2\5\4\0\3\5\1\223\26\5" +
                    "\14\0\2\5\4\0\7\5\1\224\22\5\14\0\2\5" +
                    "\4\0\15\5\1\225\14\5\14\0\2\5\4\0\13\5" +
                    "\1\226\16\5\14\0\2\5\4\0\5\5\1\227\24\5" +
                    "\14\0\2\5\4\0\1\230\31\5\14\0\2\5\4\0" +
                    "\3\5\1\231\26\5\14\0\2\5\4\0\16\5\1\232" +
                    "\13\5\14\0\2\5\4\0\10\5\1\233\21\5\14\0" +
                    "\2\5\4\0\11\5\1\234\20\5\14\0\2\5\4\0" +
                    "\3\5\1\235\26\5\14\0\2\5\4\0\13\5\1\236" +
                    "\16\5\14\0\2\5\4\0\3\5\1\237\26\5\14\0" +
                    "\2\5\4\0\16\5\1\240\13\5\14\0\2\5\4\0" +
                    "\5\5\1\241\24\5\14\0\2\5\4\0\25\5\1\242" +
                    "\4\5\14\0\2\5\4\0\16\5\1\243\13\5\14\0" +
                    "\2\5\4\0\3\5\1\244\26\5\14\0\2\5\4\0" +
                    "\16\5\1\245\13\5\14\0\2\5\4\0\1\246\31\5" +
                    "\14\0\2\5\4\0\1\5\1\247\30\5\14\0\2\5" +
                    "\4\0\3\5\1\250\26\5\14\0\2\5\4\0\1\251" +
                    "\31\5\14\0\2\5\4\0\7\5\1\252\22\5\14\0" +
                    "\2\5\4\0\20\5\1\253\11\5\14\0\2\5\4\0" +
                    "\13\5\1\254\16\5\14\0\2\5\4\0\1\255\31\5" +
                    "\11\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[5984];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final char[] EMPTY_BUFFER = new char[0];
    private static final int YYEOF = -1;
    private static java.io.Reader zzReader = null; // Fake

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\23\1\10\11\33\1\1\0\33\1\1\11" +
                    "\1\0\32\1\1\11\74\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[173];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * this buffer may contains the current text array to be matched when it is cheap to acquire it
     */
    private char[] zzBufferArray;

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public _IceLexer() {
        this((java.io.Reader) null);
    }

    public void goTo(int offset) {
        zzCurrentPos = zzMarkedPos = zzStartRead = offset;
        zzPushbackPos = 0;
        zzAtEOF = offset < zzEndRead;
    }


    _IceLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    _IceLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 1752) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;
        char[] zzBufferArrayL = zzBufferArray;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL.charAt(zzCurrentPosL++);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL.charAt(zzCurrentPosL++);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 16: {
                    return SliceTokenTypes.KEYWORD_OUT;
                }
                case 45:
                    break;
                case 4: {
                    return SliceTokenTypes.MACROS_LINE;
                }
                case 46:
                    break;
                case 44: {
                    return SliceTokenTypes.KEYWORD_LOCALOBJECT;
                }
                case 47:
                    break;
                case 9: {
                    return SliceTokenTypes.LBRACKET;
                }
                case 48:
                    break;
                case 14: {
                    return SliceTokenTypes.END_OF_LINE_COMMENT;
                }
                case 49:
                    break;
                case 20: {
                    return SliceTokenTypes.KEYWORD_ENUM;
                }
                case 50:
                    break;
                case 23: {
                    return SliceTokenTypes.KEYWORD_BYTE;
                }
                case 51:
                    break;
                case 7: {
                    return SliceTokenTypes.LBRACE;
                }
                case 52:
                    break;
                case 24: {
                    return SliceTokenTypes.KEYWORD_VOID;
                }
                case 53:
                    break;
                case 28: {
                    return SliceTokenTypes.KEYWORD_SHORT;
                }
                case 54:
                    break;
                case 8: {
                    return SliceTokenTypes.RBRACE;
                }
                case 55:
                    break;
                case 40: {
                    return SliceTokenTypes.KEYWORD_INTERFACE;
                }
                case 56:
                    break;
                case 43: {
                    return SliceTokenTypes.KEYWORD_DICTIONARY;
                }
                case 57:
                    break;
                case 38: {
                    return SliceTokenTypes.KEYWORD_SEQUENCE;
                }
                case 58:
                    break;
                case 19: {
                    return SliceTokenTypes.KEYWORD_TRUE;
                }
                case 59:
                    break;
                case 1: {
                    return SliceTokenTypes.BAD_CHARACTER;
                }
                case 60:
                    break;
                case 37: {
                    return SliceTokenTypes.KEYWORD_EXTENDS;
                }
                case 61:
                    break;
                case 29: {
                    return SliceTokenTypes.KEYWORD_CLASS;
                }
                case 62:
                    break;
                case 32: {
                    return SliceTokenTypes.KEYWORD_STRUCT;
                }
                case 63:
                    break;
                case 6: {
                    return SliceTokenTypes.RPARENTH;
                }
                case 64:
                    break;
                case 27: {
                    return SliceTokenTypes.KEYWORD_LOCAL;
                }
                case 65:
                    break;
                case 22: {
                    return SliceTokenTypes.KEYWORD_BOOL;
                }
                case 66:
                    break;
                case 21: {
                    return SliceTokenTypes.KEYWORD_LONG;
                }
                case 67:
                    break;
                case 17: {
                    return SliceTokenTypes.KEYWORD_INT;
                }
                case 68:
                    break;
                case 3: {
                    return SliceTokenTypes.IDENTIFIER;
                }
                case 69:
                    break;
                case 33: {
                    return SliceTokenTypes.KEYWORD_STRING;
                }
                case 70:
                    break;
                case 26: {
                    return SliceTokenTypes.KEYWORD_FLOAT;
                }
                case 71:
                    break;
                case 36: {
                    return SliceTokenTypes.KEYWORD_MODULE;
                }
                case 72:
                    break;
                case 39: {
                    return SliceTokenTypes.KEYWORD_EXCEPTION;
                }
                case 73:
                    break;
                case 12: {
                    return SliceTokenTypes.COMMA;
                }
                case 74:
                    break;
                case 30: {
                    return SliceTokenTypes.KEYWORD_CONST;
                }
                case 75:
                    break;
                case 2: {
                    return SliceTokenTypes.WHITE_SPACE;
                }
                case 76:
                    break;
                case 18: {
                    return SliceTokenTypes.ELLIPSIS;
                }
                case 77:
                    break;
                case 10: {
                    return SliceTokenTypes.RBRACKET;
                }
                case 78:
                    break;
                case 42: {
                    return SliceTokenTypes.KEYWORD_IMPLEMENTS;
                }
                case 79:
                    break;
                case 35: {
                    return SliceTokenTypes.KEYWORD_OBJECT;
                }
                case 80:
                    break;
                case 31: {
                    return SliceTokenTypes.KEYWORD_THROWS;
                }
                case 81:
                    break;
                case 11: {
                    return SliceTokenTypes.SEMICOLON;
                }
                case 82:
                    break;
                case 41: {
                    return SliceTokenTypes.KEYWORD_IDEMPOTENT;
                }
                case 83:
                    break;
                case 5: {
                    return SliceTokenTypes.LPARENTH;
                }
                case 84:
                    break;
                case 15: {
                    return SliceTokenTypes.C_STYLE_COMMENT;
                }
                case 85:
                    break;
                case 13: {
                    return SliceTokenTypes.DOT;
                }
                case 86:
                    break;
                case 34: {
                    return SliceTokenTypes.KEYWORD_DOUBLE;
                }
                case 87:
                    break;
                case 25: {
                    return SliceTokenTypes.KEYWORD_FALSE;
                }
                case 88:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        return null;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
