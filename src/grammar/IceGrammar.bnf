{
    parserClass="org.xblackcat.frozenice.parser.SliceParser"
    stubParserClass="org.xblackcat.frozenice.parser.SliceParserUtil"

    implements="org.xblackcat.frozenice.psi.SliceCompositeElement"
    extends="org.xblackcat.frozenice.psi.impl.SliceCompositeElementImpl"

    psiClassPrefix="Slice"
    psiImplClassSuffix="Impl"
    psiPackage="org.xblackcat.frozenice.psi"
    psiImplPackage="org.xblackcat.frozenice.psi.impl"
    psiImplUtilClass="org.xblackcat.frozenice.psi.impl.SlicePsiImplUtil"

    elementTypeHolderClass="org.xblackcat.frozenice.psi.SliceTypes"
    elementTypePrefix="ICE_"
    elementTypeClass="org.xblackcat.frozenice.psi.SliceCompositeElementType"
    tokenTypeClass="org.xblackcat.frozenice.psi.SliceTokenType"


    // Tokens
    EQ="="
    SEMICOLON=";"
    COMA=","
    ASTERISK="*"
    LT="<"
    GT=">"
    LEFT_BRACE="{"
    RIGHT_BRACE="}"
    LEFT_BRACKET="["
    RIGHT_BRACKET="]"
    OPEN_GL_MD="[["
    CLOSE_GL_MD="]]"
    LEFT_PARENTH="("
    RIGHT_PARENTH=")"

    KW_VOID="void"

    // Primitive data types
    KW_BOOL="bool"
    KW_BYTE="byte"
    KW_SHORT="short"
    KW_INT="int"
    KW_LONG="long"
    KW_FLOAT="float"
    KW_DOUBLE="double"

    // Simple data types
    KW_LOCAL_OBJECT="LocalObject"
    KW_STRING="string"
    KW_OBJECT="Object"

    // Composite data type declarations
    KW_CLASS="class"
    KW_EXCEPTION="exception"
    KW_INTERFACE="interface"
    KW_SEQUENCE="sequence"
    KW_STRUCT="struct"
    KW_DICTIONARY="dictionary"
    KW_ENUM="enum"

    //
    // Other keywords
    //

    // Boolean data type allowed values
    KW_FALSE="false"
    KW_TRUE="true"

    // Parameter modifier list
    KW_OUT="out"

    // Method modifier list
    KW_LOCAL="local"
    KW_IDEMPOTENT="idempotent"

    // Other keywords
    KW_MODULE="module"
    KW_CONST="const"
    KW_THROWS="throws"
    KW_EXTENDS="extends"
    KW_IMPLEMENTS="implements"


    implements("class_def|interface_def|exception_def|sequence_def|dictionary_def|enum_def|structure_def")="org.xblackcat.frozenice.psi.SliceNamedElement"
    extends("class_def|interface_def|exception_def|sequence_def|dictionary_def|enum_def|structure_def")="org.xblackcat.frozenice.psi.impl.SliceNamedElementImpl"
}

external slice_file ::= parse_file slice_block
private slice_block ::= (global_metadata)*  module {recoverUntil=slice_block_recover}
private module_start ::= metadata* 'module' id
module ::= module_start '{' module_body '}' ';' {pin=2}
private slice_block_recover ::= !('[[' | module_start)

module_body ::= (module | data_definition | constant | forward_declaration ) * {recoverUntil=data_def_recover }
global_metadata ::= '[[' metadata_body ']]' {pin=1}
metadata ::= '[' metadata_body ']' {pin=1}

metadata_body ::= metadata_element (',' metadata_element) *
metadata_element ::= string

private data_definition ::= class_def | interface_def | exception_def | struct_def | enum_def | sequence_def | dictionary_def
private data_def_recover ::= !(module_start | '[' | 'const' | 'class' | 'interface' | 'enum' | 'exception' | 'struct' | 'sequence' | 'dictionary' | '}' | ';')

extends_list ::= 'extends' type_reference (',' type_reference) *
implements_list ::= 'implements' type_reference (',' type_reference) *

// --- Forward declaration ---
private forward_declaration ::= class_fw_def | interface_fw_def | exception_fw_def | structure_fw_def
class_fw_def ::= class_def_start ';'
interface_fw_def ::= interface_def_start ';'
exception_fw_def ::= exception_def_start ';'
structure_fw_def ::= struct_def_start ';'

// --- Class ---
private class_def_start ::= metadata* 'class' id
class_def ::= class_def_start extends_list? implements_list? '{' class_body '}' ';' {pin=4}
class_body ::= (field_definition | method_definition | constant ) * {recoverUntil=block_recover}

// --- Interface ---
private interface_def_start ::= metadata* 'interface' id
interface_def ::= interface_def_start extends_list? '{' interface_body '}' ';'{pin=3}
interface_body ::= (method_definition | constant ) * {recoverUntil=block_recover}

// --- Exceptions ---
private exception_def_start ::= metadata* 'exception' id
exception_def ::= exception_def_start extends_list? '{' exception_body '}' ';' {pin=3}
exception_body ::= (method_definition | field_definition | constant) * {recoverUntil=block_recover}

// --- Structures ---
private struct_def_start ::= metadata* 'struct' id
struct_def ::= struct_def_start '{' struct_body '}' ';'{pin=2}
struct_body ::= field_definition + {recoverUntil=block_recover}

// --- Enums ---
private enum_def_start ::= metadata* 'enum' id
enum_def ::= enum_def_start '{' enum_constant_list '}' ';'
enum_constant_list ::= id (',' id) * {recoverUntil=block_recover}

block_recover ::= !('}')

element_type ::= data_type
key_type ::= primitive_data_types | 'string' | type_reference
// --- Sequences ---
sequence_def ::= metadata* 'sequence' '<' element_type '>' id ';' {pin = 2}

// --- Dictionaries ---
dictionary_def ::= metadata* 'dictionary' '<' key_type ',' element_type '>' ';' {pin = 2}

// --- Other ---
type_reference ::= id
proxy_type ::= (simple_data_types | type_reference) '*'
private valid_return_type ::= data_type | 'void'
data_type ::= proxy_type | primitive_data_types | simple_data_types | type_reference

// -- method --
method_definition ::= metadata* modifier* method_return_type id  '(' parameters_list? ')' ('throws' throws_list)? ';'
throws_list ::= type_reference (',' type_reference) *
modifier ::= 'idempotent' | 'local'
method_return_type ::= valid_return_type
parameters_list ::= parameter (',' parameter) * {recoverUntil=parameters_list_recovery}
parameter ::= parameter_modifier * data_type id
parameter_modifier ::= 'out'
private parameters_list_recovery ::= !(')')

constant_value ::= (integer_value | float_value | bool_value | string | type_reference)

variable_type ::= data_type

field_definition ::= variable_type id ('=' constant_value )? ';' {pin=2}

constant ::= 'const' variable_type id '=' constant_value ';' {pin=3}

//
// Data types
//

// Primitive data types
private primitive_data_types ::= 'float' | 'double' | 'bool' | 'byte' | 'short' | 'int' | 'long'

// Simple data types
private simple_data_types ::= 'LocalObject' | 'string' | 'Object'

// Boolean data type allowed values
private bool_value ::= 'false' | 'true'
