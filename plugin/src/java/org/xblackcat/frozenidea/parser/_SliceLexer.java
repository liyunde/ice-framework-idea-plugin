/* The following code was generated by JFlex 1.4.3 on 17.06.15 14:21 */

package org.xblackcat.frozenidea.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static org.xblackcat.frozenidea.psi.SliceTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17.06.15 14:21 from the specification file
 * <tt>P:/learn.projects/FrozenIdea/plugin/src/java/org/xblackcat/frozenidea/parser/_SliceLexer.flex</tt>
 */
public class _SliceLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\7"+
    "\1\26\4\0\1\40\1\41\1\5\1\16\1\31\1\16\1\13\1\4"+
    "\1\20\7\23\2\14\1\42\1\30\1\32\1\27\1\33\2\0\3\22"+
    "\1\17\1\15\1\17\5\12\1\24\2\12\1\64\13\12\1\36\1\6"+
    "\1\37\1\0\1\11\1\0\1\61\1\47\1\63\1\46\1\52\1\60"+
    "\1\57\1\54\1\45\1\65\1\12\1\25\1\70\1\56\1\44\1\66"+
    "\1\67\1\55\1\53\1\51\1\62\1\43\1\71\1\21\1\50\1\12"+
    "\1\34\1\0\1\35\54\0\1\10\12\0\1\10\4\0\1\10\5\0"+
    "\27\10\1\0\37\10\1\0\u01ca\10\4\0\14\10\16\0\5\10\7\0"+
    "\1\10\1\0\1\10\201\0\5\10\1\0\2\10\2\0\4\10\10\0"+
    "\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0\123\10\1\0"+
    "\213\10\10\0\236\10\11\0\46\10\2\0\1\10\7\0\47\10\110\0"+
    "\33\10\5\0\3\10\55\0\53\10\43\0\2\10\1\0\143\10\1\0"+
    "\1\10\17\0\2\10\7\0\2\10\12\0\3\10\2\0\1\10\20\0"+
    "\1\10\1\0\36\10\35\0\131\10\13\0\1\10\30\0\41\10\11\0"+
    "\2\10\4\0\1\10\5\0\26\10\4\0\1\10\11\0\1\10\3\0"+
    "\1\10\27\0\31\10\107\0\1\10\1\0\13\10\127\0\66\10\3\0"+
    "\1\10\22\0\1\10\7\0\12\10\17\0\7\10\1\0\7\10\5\0"+
    "\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0"+
    "\4\10\3\0\1\10\20\0\1\10\15\0\2\10\1\0\3\10\16\0"+
    "\2\10\23\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\2\10\1\0\2\10\37\0\4\10\1\0\1\10\23\0"+
    "\3\10\20\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\5\10\3\0\1\10\22\0\1\10\17\0\2\10\43\0"+
    "\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\5\10\3\0\1\10\36\0\2\10\1\0\3\10\17\0\1\10\21\0"+
    "\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0"+
    "\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10\26\0"+
    "\1\10\64\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0"+
    "\5\10\3\0\1\10\32\0\2\10\6\0\2\10\43\0\10\10\1\0"+
    "\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0\1\10\40\0"+
    "\1\10\1\0\2\10\17\0\2\10\22\0\10\10\1\0\3\10\1\0"+
    "\51\10\2\0\1\10\20\0\1\10\21\0\2\10\30\0\6\10\5\0"+
    "\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10\72\0"+
    "\60\10\1\0\2\10\14\0\7\10\72\0\2\10\1\0\1\10\2\0"+
    "\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0"+
    "\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0\4\10\1\0"+
    "\2\10\11\0\1\10\2\0\5\10\1\0\1\10\25\0\4\10\40\0"+
    "\1\10\77\0\10\10\1\0\44\10\33\0\5\10\163\0\53\10\24\0"+
    "\1\10\20\0\6\10\4\0\4\10\3\0\1\10\3\0\2\10\7\0"+
    "\3\10\4\0\15\10\14\0\1\10\21\0\46\10\1\0\1\10\5\0"+
    "\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10\1\0"+
    "\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0"+
    "\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0"+
    "\71\10\1\0\4\10\2\0\103\10\45\0\20\10\20\0\125\10\14\0"+
    "\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\25\0\15\10\1\0"+
    "\4\10\16\0\22\10\16\0\22\10\16\0\15\10\1\0\3\10\17\0"+
    "\64\10\43\0\1\10\4\0\1\10\103\0\130\10\10\0\51\10\1\0"+
    "\1\10\5\0\106\10\12\0\35\10\63\0\36\10\2\0\5\10\13\0"+
    "\54\10\25\0\7\10\70\0\27\10\11\0\65\10\122\0\1\10\135\0"+
    "\57\10\21\0\7\10\67\0\36\10\15\0\2\10\12\0\54\10\32\0"+
    "\44\10\51\0\3\10\12\0\44\10\153\0\4\10\1\0\4\10\3\0"+
    "\2\10\11\0\300\10\100\0\u0116\10\2\0\6\10\2\0\46\10\2\0"+
    "\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0"+
    "\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0"+
    "\7\10\164\0\1\10\15\0\1\10\20\0\15\10\145\0\1\10\4\0"+
    "\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0\4\10\5\0"+
    "\5\10\4\0\1\10\64\0\2\10\u0a7b\0\57\10\1\0\57\10\1\0"+
    "\205\10\6\0\4\10\3\0\2\10\14\0\46\10\1\0\1\10\5\0"+
    "\1\10\2\0\70\10\7\0\1\10\20\0\27\10\11\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\120\0\1\10\u01d5\0\2\10\52\0\5\10\5\0"+
    "\2\10\4\0\126\10\6\0\3\10\1\0\132\10\1\0\4\10\5\0"+
    "\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0\u19b6\10\112\0"+
    "\u51cd\10\63\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0\20\10\12\0"+
    "\2\10\24\0\57\10\20\0\31\10\10\0\106\10\61\0\11\10\2\0"+
    "\147\10\2\0\4\10\1\0\4\10\14\0\13\10\115\0\12\10\1\0"+
    "\3\10\1\0\4\10\1\0\27\10\35\0\64\10\16\0\62\10\76\0"+
    "\6\10\3\0\1\10\16\0\34\10\12\0\27\10\31\0\35\10\7\0"+
    "\57\10\34\0\1\10\60\0\51\10\27\0\3\10\1\0\10\10\24\0"+
    "\27\10\3\0\1\10\5\0\60\10\1\0\1\10\3\0\2\10\2\0"+
    "\5\10\2\0\1\10\1\0\1\10\30\0\3\10\2\0\13\10\7\0"+
    "\3\10\14\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0"+
    "\7\10\221\0\43\10\35\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0"+
    "\u016e\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0\1\10\1\0"+
    "\12\10\1\0\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0"+
    "\14\10\164\0\5\10\1\0\207\10\44\0\32\10\6\0\32\10\13\0"+
    "\131\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\1\1\6\1\5\1\6\2\5\1\1\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\1\14\5\1\22\1\0\2\23\1\0\1\24"+
    "\1\25\1\0\1\25\1\6\1\5\1\0\1\6\1\0"+
    "\2\5\1\26\1\27\1\30\1\31\26\5\1\32\1\33"+
    "\1\25\1\0\1\34\1\6\4\5\1\35\1\5\1\36"+
    "\23\5\2\0\1\5\1\37\1\5\1\40\5\5\1\41"+
    "\1\42\1\5\1\43\2\5\1\44\12\5\1\32\1\33"+
    "\1\5\1\45\13\5\1\46\1\47\1\50\1\51\1\52"+
    "\6\5\1\53\1\5\1\54\2\5\1\55\1\56\1\5"+
    "\1\57\1\60\5\5\1\61\10\5\1\62\2\5\1\63"+
    "\2\5\1\64\1\5\1\65\1\66\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\72\0\350\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\u032c\0\u0366"+
    "\0\72\0\72\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\72\0\u015c\0\u0706\0\72\0\u0740\0\u077a\0\72"+
    "\0\72\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u02f2"+
    "\0\72\0\72\0\72\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u015c\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u015c\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\u015c\0\u1586\0\u015c\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u015c\0\u015c\0\u16e2\0\u015c"+
    "\0\u171c\0\u1756\0\u015c\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878"+
    "\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\72\0\72\0\u19d4"+
    "\0\u015c\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u015c\0\u015c\0\u015c\0\u015c"+
    "\0\u015c\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u015c"+
    "\0\u1de8\0\u015c\0\u1e22\0\u1e5c\0\u015c\0\u015c\0\u1e96\0\u015c"+
    "\0\u015c\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u015c\0\u1ff2"+
    "\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u015c"+
    "\0\u21c2\0\u21fc\0\u015c\0\u2236\0\u2270\0\u015c\0\u22aa\0\u015c"+
    "\0\u015c\0\u015c\0\u015c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\10\1\11\1\12\1\13\1\2\1\10\1\14\2\10"+
    "\1\12\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\10\1\41\1\42"+
    "\1\43\4\10\1\44\2\10\1\45\1\46\3\10\1\47"+
    "\1\10\73\0\3\3\72\0\1\50\1\51\64\0\1\52"+
    "\2\0\5\52\1\53\1\52\1\53\2\52\1\53\1\52"+
    "\1\53\1\52\2\53\1\52\2\53\15\52\27\53\1\7"+
    "\2\0\3\7\1\54\1\55\62\7\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\27\10\14\0\1\56\3\0"+
    "\1\56\2\0\1\56\61\0\1\56\1\12\1\57\1\0"+
    "\1\60\1\12\2\0\1\12\2\61\20\0\1\60\3\0"+
    "\1\57\5\0\1\60\22\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\21\10\1\62\5\10\13\0\1\56\1\63"+
    "\1\57\1\0\1\60\1\64\1\65\1\0\1\64\2\61"+
    "\20\0\1\60\3\0\1\57\5\0\1\60\22\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\1\10\1\66\25\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\1\10"+
    "\1\67\25\10\2\70\1\0\67\70\36\0\1\71\72\0"+
    "\1\72\74\0\1\73\40\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\1\10\1\74\25\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\17\10\1\75\7\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\3\10\1\76"+
    "\7\10\1\77\11\10\1\100\1\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\1\10\1\101\1\102\24\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\1\10"+
    "\1\103\3\10\1\104\21\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\11\10\1\105\1\106\14\10\11\0"+
    "\2\10\1\0\2\10\1\0\2\10\1\107\4\10\15\0"+
    "\13\10\1\110\13\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\6\10\1\111\1\112\1\10\1\113\15\10"+
    "\11\0\2\10\1\0\2\10\1\0\6\10\1\114\15\0"+
    "\16\10\1\115\10\10\11\0\2\10\1\0\2\10\1\0"+
    "\6\10\1\116\15\0\1\10\1\117\25\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\4\10\1\120\22\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\1\10"+
    "\1\121\25\10\2\50\1\0\67\50\5\122\1\123\64\122"+
    "\1\7\2\0\67\7\14\0\1\56\1\57\1\0\1\60"+
    "\1\56\2\0\1\56\22\0\1\60\3\0\1\57\5\0"+
    "\1\60\25\0\1\124\1\0\1\125\1\0\1\124\2\0"+
    "\1\124\57\0\2\10\1\0\2\10\1\0\5\10\1\126"+
    "\1\10\15\0\27\10\13\0\1\56\1\63\1\57\1\0"+
    "\1\60\1\63\2\0\1\63\22\0\1\60\3\0\1\57"+
    "\5\0\1\60\24\0\1\56\1\63\1\57\1\0\1\60"+
    "\1\64\2\0\1\64\2\61\20\0\1\60\3\0\1\57"+
    "\5\0\1\60\25\0\2\127\1\0\2\127\1\0\2\127"+
    "\22\0\2\127\2\0\1\127\5\0\2\127\1\0\1\127"+
    "\17\0\2\10\1\0\2\10\1\0\7\10\15\0\20\10"+
    "\1\130\6\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\13\10\1\131\4\10\1\132\6\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\2\10\1\133\24\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\6\10"+
    "\1\134\20\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\7\10\1\135\17\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\6\10\1\136\20\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\23\10\1\137\3\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\17\10"+
    "\1\140\7\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\20\10\1\141\6\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\1\10\1\142\25\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\6\10\1\143\20\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\12\10"+
    "\1\144\14\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\17\10\1\145\7\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\6\10\1\146\11\10\1\147\6\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\17\10"+
    "\1\150\7\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\12\10\1\151\14\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\24\10\1\152\2\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\1\10\1\153\25\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\1\10"+
    "\1\154\25\10\11\0\2\10\1\0\2\10\1\0\6\10"+
    "\1\155\15\0\27\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\16\10\1\156\10\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\13\10\1\157\13\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\22\10\1\160"+
    "\4\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\3\10\1\161\23\10\5\122\1\162\64\122\5\123\1\163"+
    "\64\123\14\0\1\124\2\0\1\60\1\124\2\0\1\124"+
    "\22\0\1\60\11\0\1\60\25\0\1\124\3\0\1\124"+
    "\2\0\1\124\62\0\2\127\1\0\2\127\1\0\2\127"+
    "\2\61\20\0\2\127\2\0\1\127\5\0\2\127\1\0"+
    "\1\127\17\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\16\10\1\164\10\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\14\10\1\165\12\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\16\10\1\166\10\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\3\10\1\167"+
    "\23\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\25\10\1\170\1\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\7\10\1\171\17\10\11\0\2\10\1\0"+
    "\2\10\1\0\6\10\1\172\15\0\27\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\4\10\1\173\22\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\6\10"+
    "\1\174\20\10\11\0\2\10\1\0\2\10\1\0\6\10"+
    "\1\175\15\0\27\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\7\10\1\176\17\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\1\10\1\177\25\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\7\10\1\200"+
    "\17\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\7\10\1\201\17\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\7\10\1\202\17\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\25\10\1\203\1\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\2\10\1\204"+
    "\14\10\1\205\7\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\17\10\1\206\7\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\12\10\1\207\14\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\16\10\1\210"+
    "\10\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\10\10\1\211\16\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\10\10\1\212\16\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\10\10\1\213\16\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\7\10\1\214"+
    "\17\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\17\10\1\215\7\10\4\122\1\216\1\162\64\122\4\123"+
    "\1\217\1\163\64\123\11\0\2\10\1\0\2\10\1\0"+
    "\6\10\1\220\15\0\27\10\11\0\2\10\1\0\2\10"+
    "\1\0\6\10\1\221\15\0\27\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\23\10\1\222\3\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\12\10\1\223"+
    "\14\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\7\10\1\224\17\10\11\0\2\10\1\0\2\10\1\0"+
    "\6\10\1\225\15\0\27\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\2\10\1\226\24\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\26\10\1\227\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\13\10\1\230"+
    "\13\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\23\10\1\231\3\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\13\10\1\232\13\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\20\10\1\233\6\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\7\10\1\234"+
    "\17\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\6\10\1\235\20\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\6\10\1\236\20\10\11\0\2\10\1\0"+
    "\2\10\1\0\7\10\15\0\7\10\1\237\17\10\11\0"+
    "\2\10\1\0\2\10\1\0\7\10\15\0\10\10\1\240"+
    "\16\10\11\0\2\10\1\0\2\10\1\0\7\10\15\0"+
    "\6\10\1\241\20\10\11\0\2\10\1\0\2\10\1\0"+
    "\7\10\15\0\20\10\1\242\6\10\11\0\2\10\1\0"+
    "\2\10\1\0\6\10\1\243\15\0\27\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\21\10\1\244\5\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\1\10"+
    "\1\245\25\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\15\10\1\246\11\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\25\10\1\247\1\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\7\10\1\250\17\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\1\10"+
    "\1\251\25\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\10\10\1\252\16\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\3\10\1\253\23\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\6\10\1\254\20\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\14\10"+
    "\1\255\12\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\6\10\1\256\20\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\13\10\1\257\13\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\6\10\1\260\20\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\7\10"+
    "\1\261\17\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\4\10\1\262\22\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\6\10\1\263\20\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\16\10\1\264\10\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\7\10"+
    "\1\265\17\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\13\10\1\266\13\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\10\10\1\267\16\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\2\10\1\270\24\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\20\10"+
    "\1\271\6\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\22\10\1\272\4\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\7\10\1\273\17\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\20\10\1\274\6\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\13\10"+
    "\1\275\13\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\16\10\1\276\10\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\1\10\1\277\25\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\7\10\1\300\17\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\7\10"+
    "\1\301\17\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\13\10\1\302\13\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\7\10\1\303\17\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\6\10\1\304\20\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\12\10"+
    "\1\305\14\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\13\10\1\306\13\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\20\10\1\307\6\10\11\0\2\10"+
    "\1\0\2\10\1\0\7\10\15\0\6\10\1\310\20\10"+
    "\11\0\2\10\1\0\2\10\1\0\7\10\15\0\10\10"+
    "\1\311\16\10\11\0\2\10\1\0\2\10\1\0\7\10"+
    "\15\0\5\10\1\312\21\10\11\0\2\10\1\0\2\10"+
    "\1\0\7\10\15\0\6\10\1\313\20\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8932];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\12\1\7\11\2\1\2\11"+
    "\16\1\1\0\1\11\1\1\1\0\1\11\1\1\1\0"+
    "\2\11\1\1\1\0\1\1\1\0\3\1\3\11\31\1"+
    "\1\0\34\1\2\0\32\1\2\11\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _SliceLexer() {
    this((java.io.Reader)null);
  }


  public _SliceLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _SliceLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1620) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return ICE_OPEN_GL_MD;
          }
        case 57: break;
        case 45: 
          { return ICE_KW_STRING;
          }
        case 58: break;
        case 6: 
          { return ICE_INTEGER_VALUE;
          }
        case 59: break;
        case 4: 
          { return ICE_BAD_STRING;
          }
        case 60: break;
        case 15: 
          { return ICE_RIGHT_BRACKET;
          }
        case 61: break;
        case 41: 
          { return ICE_KW_CLASS;
          }
        case 62: break;
        case 37: 
          { return ICE_KW_LOCAL;
          }
        case 63: break;
        case 55: 
          { return ICE_KW_DICTIONARY;
          }
        case 64: break;
        case 48: 
          { return ICE_KW_MODULE;
          }
        case 65: break;
        case 39: 
          { return ICE_KW_FLOAT;
          }
        case 66: break;
        case 21: 
          { return ICE_FLOAT_VALUE;
          }
        case 67: break;
        case 5: 
          { return ICE_ID;
          }
        case 68: break;
        case 11: 
          { return ICE_GT;
          }
        case 69: break;
        case 13: 
          { return ICE_RIGHT_BRACE;
          }
        case 70: break;
        case 28: 
          { return ICE_EOL;
          }
        case 71: break;
        case 42: 
          { return ICE_KW_CONST;
          }
        case 72: break;
        case 24: 
          { return ICE_CLOSE_GL_MD;
          }
        case 73: break;
        case 25: 
          { return ICE_NAME_SEPARATOR;
          }
        case 74: break;
        case 26: 
          { return ICE_C_STYLE_COMMENT;
          }
        case 75: break;
        case 47: 
          { return ICE_KW_OBJECT;
          }
        case 76: break;
        case 36: 
          { return ICE_KW_ENUM;
          }
        case 77: break;
        case 29: 
          { return ICE_KW_OUT;
          }
        case 78: break;
        case 44: 
          { return ICE_KW_THROWS;
          }
        case 79: break;
        case 34: 
          { return ICE_KW_BYTE;
          }
        case 80: break;
        case 16: 
          { return ICE_LEFT_PARENTH;
          }
        case 81: break;
        case 7: 
          { return ICE_EQ;
          }
        case 82: break;
        case 32: 
          { return ICE_KW_VOID;
          }
        case 83: break;
        case 51: 
          { return ICE_KW_INTERFACE;
          }
        case 84: break;
        case 35: 
          { return ICE_KW_TRUE;
          }
        case 85: break;
        case 8: 
          { return ICE_SEMICOLON;
          }
        case 86: break;
        case 54: 
          { return ICE_KW_IMPLEMENTS;
          }
        case 87: break;
        case 33: 
          { return ICE_KW_BOOL;
          }
        case 88: break;
        case 12: 
          { return ICE_LEFT_BRACE;
          }
        case 89: break;
        case 31: 
          { return ICE_KW_LONG;
          }
        case 90: break;
        case 56: 
          { return ICE_KW_LOCAL_OBJECT;
          }
        case 91: break;
        case 43: 
          { return ICE_KW_DOUBLE;
          }
        case 92: break;
        case 27: 
          { return ICE_DOC_STYLE_COMMENT;
          }
        case 93: break;
        case 52: 
          { return ICE_KW_EXCEPTION;
          }
        case 94: break;
        case 10: 
          { return ICE_LT;
          }
        case 95: break;
        case 19: 
          { return ICE_ESCAPE_SEQUENCE;
          }
        case 96: break;
        case 53: 
          { return ICE_KW_IDEMPOTENT;
          }
        case 97: break;
        case 20: 
          { return ICE_STRING_VALUE;
          }
        case 98: break;
        case 50: 
          { return ICE_KW_SEQUENCE;
          }
        case 99: break;
        case 30: 
          { return ICE_KW_INT;
          }
        case 100: break;
        case 14: 
          { return ICE_LEFT_BRACKET;
          }
        case 101: break;
        case 40: 
          { return ICE_KW_FALSE;
          }
        case 102: break;
        case 3: 
          { return ICE_ASTERISK;
          }
        case 103: break;
        case 17: 
          { return ICE_RIGHT_PARENTH;
          }
        case 104: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 105: break;
        case 49: 
          { return ICE_KW_EXTENDS;
          }
        case 106: break;
        case 9: 
          { return ICE_COMA;
          }
        case 107: break;
        case 38: 
          { return ICE_KW_SHORT;
          }
        case 108: break;
        case 22: 
          { return ICE_DIRECTIVE;
          }
        case 109: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 110: break;
        case 46: 
          { return ICE_KW_STRUCT;
          }
        case 111: break;
        case 18: 
          { return ICE_END_OF_LINE_COMMENT;
          }
        case 112: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
