/* The following code was generated by JFlex 1.4.3 on 17.06.15 11:10 */

package org.xblackcat.frozenidea.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static org.xblackcat.frozenidea.psi.SliceTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17.06.15 11:10 from the specification file
 * <tt>P:/learn.projects/FrozenIdea/plugin/src/java/org/xblackcat/frozenidea/parser/_SliceLexer.flex</tt>
 */
public class _SliceLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\22"+
    "\1\30\4\0\1\42\1\43\1\20\1\13\1\33\1\13\1\0\1\17"+
    "\1\4\7\6\2\5\1\44\1\32\1\34\1\31\1\35\2\0\3\7"+
    "\1\14\1\11\1\14\5\25\1\26\2\25\1\63\13\25\1\40\1\21"+
    "\1\41\1\0\1\24\1\0\1\60\1\50\1\62\1\16\1\12\1\15"+
    "\1\57\1\54\1\47\1\64\1\25\1\27\1\67\1\56\1\46\1\65"+
    "\1\66\1\55\1\53\1\52\1\61\1\45\1\70\1\10\1\51\1\25"+
    "\1\36\1\0\1\37\54\0\1\23\12\0\1\23\4\0\1\23\5\0"+
    "\27\23\1\0\37\23\1\0\u01ca\23\4\0\14\23\16\0\5\23\7\0"+
    "\1\23\1\0\1\23\201\0\5\23\1\0\2\23\2\0\4\23\10\0"+
    "\1\23\1\0\3\23\1\0\1\23\1\0\24\23\1\0\123\23\1\0"+
    "\213\23\10\0\236\23\11\0\46\23\2\0\1\23\7\0\47\23\110\0"+
    "\33\23\5\0\3\23\55\0\53\23\43\0\2\23\1\0\143\23\1\0"+
    "\1\23\17\0\2\23\7\0\2\23\12\0\3\23\2\0\1\23\20\0"+
    "\1\23\1\0\36\23\35\0\131\23\13\0\1\23\30\0\41\23\11\0"+
    "\2\23\4\0\1\23\5\0\26\23\4\0\1\23\11\0\1\23\3\0"+
    "\1\23\27\0\31\23\107\0\1\23\1\0\13\23\127\0\66\23\3\0"+
    "\1\23\22\0\1\23\7\0\12\23\17\0\7\23\1\0\7\23\5\0"+
    "\10\23\2\0\2\23\2\0\26\23\1\0\7\23\1\0\1\23\3\0"+
    "\4\23\3\0\1\23\20\0\1\23\15\0\2\23\1\0\3\23\16\0"+
    "\2\23\23\0\6\23\4\0\2\23\2\0\26\23\1\0\7\23\1\0"+
    "\2\23\1\0\2\23\1\0\2\23\37\0\4\23\1\0\1\23\23\0"+
    "\3\23\20\0\11\23\1\0\3\23\1\0\26\23\1\0\7\23\1\0"+
    "\2\23\1\0\5\23\3\0\1\23\22\0\1\23\17\0\2\23\43\0"+
    "\10\23\2\0\2\23\2\0\26\23\1\0\7\23\1\0\2\23\1\0"+
    "\5\23\3\0\1\23\36\0\2\23\1\0\3\23\17\0\1\23\21\0"+
    "\1\23\1\0\6\23\3\0\3\23\1\0\4\23\3\0\2\23\1\0"+
    "\1\23\1\0\2\23\3\0\2\23\3\0\3\23\3\0\14\23\26\0"+
    "\1\23\64\0\10\23\1\0\3\23\1\0\27\23\1\0\12\23\1\0"+
    "\5\23\3\0\1\23\32\0\2\23\6\0\2\23\43\0\10\23\1\0"+
    "\3\23\1\0\27\23\1\0\12\23\1\0\5\23\3\0\1\23\40\0"+
    "\1\23\1\0\2\23\17\0\2\23\22\0\10\23\1\0\3\23\1\0"+
    "\51\23\2\0\1\23\20\0\1\23\21\0\2\23\30\0\6\23\5\0"+
    "\22\23\3\0\30\23\1\0\11\23\1\0\1\23\2\0\7\23\72\0"+
    "\60\23\1\0\2\23\14\0\7\23\72\0\2\23\1\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\1\23\6\0\4\23\1\0\7\23\1\0"+
    "\3\23\1\0\1\23\1\0\1\23\2\0\2\23\1\0\4\23\1\0"+
    "\2\23\11\0\1\23\2\0\5\23\1\0\1\23\25\0\4\23\40\0"+
    "\1\23\77\0\10\23\1\0\44\23\33\0\5\23\163\0\53\23\24\0"+
    "\1\23\20\0\6\23\4\0\4\23\3\0\1\23\3\0\2\23\7\0"+
    "\3\23\4\0\15\23\14\0\1\23\21\0\46\23\1\0\1\23\5\0"+
    "\1\23\2\0\53\23\1\0\u014d\23\1\0\4\23\2\0\7\23\1\0"+
    "\1\23\1\0\4\23\2\0\51\23\1\0\4\23\2\0\41\23\1\0"+
    "\4\23\2\0\7\23\1\0\1\23\1\0\4\23\2\0\17\23\1\0"+
    "\71\23\1\0\4\23\2\0\103\23\45\0\20\23\20\0\125\23\14\0"+
    "\u026c\23\2\0\21\23\1\0\32\23\5\0\113\23\25\0\15\23\1\0"+
    "\4\23\16\0\22\23\16\0\22\23\16\0\15\23\1\0\3\23\17\0"+
    "\64\23\43\0\1\23\4\0\1\23\103\0\130\23\10\0\51\23\1\0"+
    "\1\23\5\0\106\23\12\0\35\23\63\0\36\23\2\0\5\23\13\0"+
    "\54\23\25\0\7\23\70\0\27\23\11\0\65\23\122\0\1\23\135\0"+
    "\57\23\21\0\7\23\67\0\36\23\15\0\2\23\12\0\54\23\32\0"+
    "\44\23\51\0\3\23\12\0\44\23\153\0\4\23\1\0\4\23\3\0"+
    "\2\23\11\0\300\23\100\0\u0116\23\2\0\6\23\2\0\46\23\2\0"+
    "\6\23\2\0\10\23\1\0\1\23\1\0\1\23\1\0\1\23\1\0"+
    "\37\23\2\0\65\23\1\0\7\23\1\0\1\23\3\0\3\23\1\0"+
    "\7\23\3\0\4\23\2\0\6\23\4\0\15\23\5\0\3\23\1\0"+
    "\7\23\164\0\1\23\15\0\1\23\20\0\15\23\145\0\1\23\4\0"+
    "\1\23\2\0\12\23\1\0\1\23\3\0\5\23\6\0\1\23\1\0"+
    "\1\23\1\0\1\23\1\0\4\23\1\0\13\23\2\0\4\23\5\0"+
    "\5\23\4\0\1\23\64\0\2\23\u0a7b\0\57\23\1\0\57\23\1\0"+
    "\205\23\6\0\4\23\3\0\2\23\14\0\46\23\1\0\1\23\5\0"+
    "\1\23\2\0\70\23\7\0\1\23\20\0\27\23\11\0\7\23\1\0"+
    "\7\23\1\0\7\23\1\0\7\23\1\0\7\23\1\0\7\23\1\0"+
    "\7\23\1\0\7\23\120\0\1\23\u01d5\0\2\23\52\0\5\23\5\0"+
    "\2\23\4\0\126\23\6\0\3\23\1\0\132\23\1\0\4\23\5\0"+
    "\51\23\3\0\136\23\21\0\33\23\65\0\20\23\u0200\0\u19b6\23\112\0"+
    "\u51cd\23\63\0\u048d\23\103\0\56\23\2\0\u010d\23\3\0\20\23\12\0"+
    "\2\23\24\0\57\23\20\0\31\23\10\0\106\23\61\0\11\23\2\0"+
    "\147\23\2\0\4\23\1\0\4\23\14\0\13\23\115\0\12\23\1\0"+
    "\3\23\1\0\4\23\1\0\27\23\35\0\64\23\16\0\62\23\76\0"+
    "\6\23\3\0\1\23\16\0\34\23\12\0\27\23\31\0\35\23\7\0"+
    "\57\23\34\0\1\23\60\0\51\23\27\0\3\23\1\0\10\23\24\0"+
    "\27\23\3\0\1\23\5\0\60\23\1\0\1\23\3\0\2\23\2\0"+
    "\5\23\2\0\1\23\1\0\1\23\30\0\3\23\2\0\13\23\7\0"+
    "\3\23\14\0\6\23\2\0\6\23\2\0\6\23\11\0\7\23\1\0"+
    "\7\23\221\0\43\23\35\0\u2ba4\23\14\0\27\23\4\0\61\23\u2104\0"+
    "\u016e\23\2\0\152\23\46\0\7\23\14\0\5\23\5\0\1\23\1\0"+
    "\12\23\1\0\15\23\1\0\5\23\1\0\1\23\1\0\2\23\1\0"+
    "\2\23\1\0\154\23\41\0\u016b\23\22\0\100\23\2\0\66\23\50\0"+
    "\14\23\164\0\5\23\1\0\207\23\44\0\32\23\6\0\32\23\13\0"+
    "\131\23\3\0\6\23\2\0\6\23\2\0\6\23\2\0\3\23\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\4\4\1\1"+
    "\1\6\1\1\1\7\2\5\1\1\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\1\3\5\1\4\3\5\1\4\2\5\1\23\3\0"+
    "\1\24\1\0\1\25\1\26\1\27\1\0\7\5\1\30"+
    "\1\0\1\31\1\0\1\31\1\0\1\32\2\5\1\33"+
    "\1\34\1\35\1\36\21\5\1\37\1\24\1\0\1\24"+
    "\1\27\1\40\7\5\1\41\1\42\5\5\1\43\1\5"+
    "\1\44\17\5\1\45\4\5\2\0\2\5\1\46\1\5"+
    "\1\47\3\5\1\50\1\51\1\5\1\52\13\5\1\53"+
    "\1\54\2\5\1\41\1\42\1\5\1\55\7\5\1\56"+
    "\1\5\1\57\1\60\4\5\1\61\5\5\1\62\1\5"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\15\5\1\71"+
    "\1\72\3\5\1\73\1\5\1\74\1\5\1\75\1\76"+
    "\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\71\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\u0390\0\u03c9\0\71\0\71\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\71\0\u0759\0\71\0\344"+
    "\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a05\0\u0a3e\0\u0a77\0\71"+
    "\0\u0ab0\0\u0ae9\0\u0357\0\71\0\71\0\71\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u07cb\0\u011d\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u011d\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u011d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u011d\0\u187e"+
    "\0\u011d\0\u18b7\0\u18f0\0\u1929\0\u011d\0\u011d\0\u1962\0\u011d"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u011d\0\u011d\0\u1c0e\0\u1c47\0\71"+
    "\0\71\0\u1c80\0\u011d\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d"+
    "\0\u1dd6\0\u1e0f\0\u011d\0\u1e48\0\u011d\0\u011d\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u1f2c\0\u011d\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049"+
    "\0\u011d\0\u2082\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d"+
    "\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u011d\0\u011d\0\u23a0"+
    "\0\u23d9\0\u2412\0\u011d\0\u244b\0\u011d\0\u2484\0\u011d\0\u011d"+
    "\0\u011d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\6\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\7\1\2\1\7\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\7\1\43"+
    "\1\44\2\7\1\45\1\7\1\6\1\7\1\46\1\47"+
    "\3\7\1\50\1\7\72\0\3\3\71\0\1\51\1\52"+
    "\1\51\1\0\1\53\2\54\1\0\3\55\2\0\1\56"+
    "\4\0\2\57\45\0\3\60\2\0\2\54\1\0\3\55"+
    "\2\0\1\56\4\0\2\57\45\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\24\7\4\0\3\61\4\7\1\62"+
    "\3\7\5\0\4\7\15\0\16\7\1\63\5\7\4\0"+
    "\3\61\1\7\1\64\2\7\1\62\3\7\5\0\4\7"+
    "\15\0\11\7\1\65\12\7\4\0\7\7\1\0\3\7"+
    "\5\0\3\7\1\66\15\0\13\7\1\67\10\7\4\0"+
    "\7\7\1\0\3\7\5\0\4\7\15\0\1\7\1\70"+
    "\1\71\21\7\17\0\1\72\1\73\50\0\1\74\1\75"+
    "\1\0\4\74\4\76\1\74\3\76\4\74\1\76\1\74"+
    "\3\76\15\74\24\76\1\17\2\0\16\17\1\77\1\100"+
    "\46\17\4\0\7\7\1\0\3\7\5\0\4\7\15\0"+
    "\1\7\1\101\22\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\1\7\1\102\22\7\2\103\1\0\66\103"+
    "\40\0\1\104\71\0\1\105\73\0\1\106\30\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\1\7\1\107\22\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\14\7"+
    "\1\110\7\7\4\0\7\7\1\0\2\7\1\111\5\0"+
    "\4\7\15\0\11\7\1\112\10\7\1\113\1\7\4\0"+
    "\7\7\1\0\3\7\5\0\4\7\15\0\1\7\1\114"+
    "\2\7\1\115\17\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\7\7\1\116\1\117\13\7\4\0\6\7"+
    "\1\120\1\0\3\7\5\0\4\7\15\0\5\7\1\121"+
    "\1\7\1\122\14\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\14\7\1\123\7\7\4\0\7\7\1\0"+
    "\3\7\5\0\3\7\1\124\15\0\1\7\1\125\22\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\3\7"+
    "\1\126\20\7\4\0\7\7\1\0\3\7\5\0\4\7"+
    "\15\0\1\7\1\127\22\7\4\0\1\51\1\52\1\51"+
    "\2\0\2\54\1\0\3\55\2\0\1\56\4\0\2\57"+
    "\45\0\3\52\2\0\2\54\1\0\3\55\2\0\1\56"+
    "\53\0\4\130\1\0\2\130\1\0\3\130\31\0\1\130"+
    "\7\0\1\130\1\0\1\130\12\0\3\131\4\0\1\132"+
    "\55\0\2\133\1\0\66\133\4\0\3\61\4\7\1\0"+
    "\3\7\5\0\4\7\15\0\24\7\4\0\3\134\66\0"+
    "\7\7\1\0\3\7\5\0\2\7\1\135\1\7\15\0"+
    "\24\7\4\0\7\7\1\0\3\7\5\0\4\7\15\0"+
    "\5\7\1\136\7\7\1\137\6\7\4\0\7\7\1\0"+
    "\3\7\5\0\4\7\15\0\14\7\1\140\7\7\4\0"+
    "\7\7\1\0\3\7\5\0\4\7\15\0\1\7\1\141"+
    "\22\7\4\0\7\7\1\0\3\7\5\0\3\7\1\142"+
    "\15\0\24\7\4\0\7\7\1\0\3\7\5\0\4\7"+
    "\15\0\14\7\1\143\7\7\4\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\15\7\1\144\6\7\2\72\1\0"+
    "\66\72\20\145\1\146\50\145\4\0\3\133\66\0\3\147"+
    "\4\7\1\0\3\7\5\0\4\7\15\0\24\7\1\17"+
    "\2\0\66\17\4\0\7\7\1\0\3\7\5\0\4\7"+
    "\15\0\15\7\1\150\6\7\4\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\11\7\1\151\3\7\1\152\6\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\2\7"+
    "\1\153\21\7\4\0\7\7\1\0\3\7\5\0\4\7"+
    "\15\0\5\7\1\154\16\7\4\0\6\7\1\155\1\0"+
    "\3\7\5\0\4\7\15\0\24\7\4\0\7\7\1\0"+
    "\3\7\5\0\4\7\15\0\5\7\1\156\16\7\4\0"+
    "\7\7\1\0\3\7\5\0\4\7\15\0\20\7\1\157"+
    "\3\7\4\0\7\7\1\0\3\7\5\0\4\7\15\0"+
    "\1\7\1\160\22\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\5\7\1\161\16\7\4\0\7\7\1\0"+
    "\3\7\5\0\4\7\15\0\10\7\1\162\13\7\4\0"+
    "\7\7\1\0\3\7\5\0\4\7\15\0\14\7\1\163"+
    "\7\7\4\0\7\7\1\0\3\7\5\0\4\7\15\0"+
    "\21\7\1\164\2\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\10\7\1\165\13\7\4\0\7\7\1\0"+
    "\3\7\5\0\4\7\15\0\1\7\1\166\22\7\4\0"+
    "\7\7\1\0\3\7\5\0\4\7\15\0\22\7\1\167"+
    "\1\7\4\0\7\7\1\0\3\7\5\0\4\7\15\0"+
    "\13\7\1\170\10\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\11\7\1\171\12\7\4\0\7\7\1\0"+
    "\3\7\5\0\4\7\15\0\17\7\1\172\4\7\4\0"+
    "\7\7\1\0\2\7\1\173\5\0\4\7\15\0\24\7"+
    "\4\0\4\130\1\0\2\130\1\0\3\130\7\0\2\57"+
    "\20\0\1\130\7\0\1\130\1\0\1\130\12\0\3\131"+
    "\5\0\3\55\56\0\3\131\66\0\3\133\2\0\2\54"+
    "\1\0\3\55\56\0\6\7\1\174\1\0\3\7\5\0"+
    "\4\7\15\0\24\7\4\0\6\7\1\175\1\0\3\7"+
    "\5\0\4\7\15\0\24\7\4\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\22\7\1\176\1\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\13\7\1\177\10\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\6\7"+
    "\1\200\15\7\4\0\7\7\1\0\3\7\5\0\4\7"+
    "\15\0\3\7\1\201\20\7\4\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\5\7\1\202\16\7\20\145\1\203"+
    "\50\145\20\146\1\204\50\146\4\0\3\147\2\7\2\205"+
    "\1\0\3\7\5\0\4\7\15\0\24\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\13\7\1\206\10\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\12\7"+
    "\1\207\11\7\4\0\7\7\1\0\3\7\5\0\4\7"+
    "\15\0\13\7\1\210\10\7\4\0\7\7\1\0\2\7"+
    "\1\211\5\0\4\7\15\0\24\7\4\0\7\7\1\0"+
    "\3\7\5\0\4\7\15\0\22\7\1\212\1\7\4\0"+
    "\6\7\1\213\1\0\3\7\5\0\4\7\15\0\24\7"+
    "\4\0\7\7\1\0\3\7\5\0\3\7\1\214\15\0"+
    "\24\7\4\0\7\7\1\0\3\7\5\0\3\7\1\215"+
    "\15\0\24\7\4\0\6\7\1\216\1\0\3\7\5\0"+
    "\4\7\15\0\24\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\1\7\1\217\22\7\4\0\6\7\1\220"+
    "\1\0\3\7\5\0\4\7\15\0\24\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\14\7\1\221\7\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\2\7"+
    "\1\222\11\7\1\223\7\7\4\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\10\7\1\224\13\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\3\7\1\225\20\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\6\7"+
    "\1\226\15\7\4\0\7\7\1\0\3\7\5\0\4\7"+
    "\15\0\6\7\1\227\15\7\4\0\6\7\1\230\1\0"+
    "\3\7\5\0\4\7\15\0\24\7\4\0\7\7\1\0"+
    "\3\7\5\0\4\7\15\0\14\7\1\231\7\7\4\0"+
    "\7\7\1\0\3\7\5\0\4\7\15\0\11\7\1\232"+
    "\12\7\4\0\7\7\1\0\3\7\5\0\4\7\15\0"+
    "\20\7\1\233\3\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\5\7\1\234\16\7\4\0\6\7\1\235"+
    "\1\0\3\7\5\0\4\7\15\0\24\7\4\0\7\7"+
    "\1\0\3\7\5\0\3\7\1\236\15\0\24\7\4\0"+
    "\7\7\1\0\3\7\5\0\4\7\15\0\2\7\1\237"+
    "\21\7\17\145\1\240\1\203\50\145\17\146\1\241\1\204"+
    "\50\146\4\0\7\7\1\132\3\7\5\0\4\7\15\0"+
    "\24\7\4\0\7\7\1\0\3\7\5\0\3\7\1\242"+
    "\15\0\24\7\4\0\7\7\1\0\3\7\5\0\3\7"+
    "\1\243\15\0\24\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\20\7\1\244\3\7\4\0\7\7\1\0"+
    "\3\7\5\0\4\7\15\0\10\7\1\245\13\7\4\0"+
    "\6\7\1\246\1\0\3\7\5\0\4\7\15\0\24\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\23\7"+
    "\1\247\4\0\6\7\1\250\1\0\3\7\5\0\4\7"+
    "\15\0\24\7\4\0\7\7\1\0\3\7\5\0\4\7"+
    "\15\0\11\7\1\251\12\7\4\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\15\7\1\252\6\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\5\7\1\253\16\7"+
    "\4\0\6\7\1\254\1\0\3\7\5\0\4\7\15\0"+
    "\24\7\4\0\7\7\1\0\3\7\5\0\4\7\15\0"+
    "\6\7\1\255\15\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\5\7\1\256\16\7\4\0\7\7\1\0"+
    "\3\7\5\0\4\7\15\0\15\7\1\257\6\7\4\0"+
    "\7\7\1\0\3\7\5\0\3\7\1\260\15\0\24\7"+
    "\4\0\7\7\1\0\2\7\1\261\5\0\4\7\15\0"+
    "\24\7\4\0\7\7\1\0\3\7\5\0\4\7\15\0"+
    "\5\7\1\262\16\7\4\0\6\7\1\263\1\0\3\7"+
    "\5\0\4\7\15\0\24\7\4\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\1\7\1\264\22\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\16\7\1\265\5\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\1\7"+
    "\1\266\22\7\4\0\7\7\1\0\1\7\1\267\1\7"+
    "\5\0\4\7\15\0\24\7\4\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\22\7\1\270\1\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\6\7\1\271\15\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\11\7"+
    "\1\272\12\7\4\0\7\7\1\0\3\7\5\0\4\7"+
    "\15\0\12\7\1\273\11\7\4\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\5\7\1\274\16\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\10\7\1\275\13\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\5\7"+
    "\1\276\16\7\4\0\6\7\1\277\1\0\3\7\5\0"+
    "\4\7\15\0\24\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\6\7\1\300\15\7\4\0\7\7\1\0"+
    "\3\7\5\0\4\7\15\0\2\7\1\301\21\7\4\0"+
    "\7\7\1\0\3\7\5\0\4\7\15\0\11\7\1\302"+
    "\12\7\4\0\7\7\1\0\3\7\5\0\4\7\15\0"+
    "\3\7\1\303\20\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\5\7\1\304\16\7\4\0\7\7\1\0"+
    "\3\7\5\0\4\7\15\0\13\7\1\305\10\7\4\0"+
    "\6\7\1\306\1\0\3\7\5\0\4\7\15\0\24\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\15\7"+
    "\1\307\6\7\4\0\7\7\1\0\3\7\5\0\4\7"+
    "\15\0\1\7\1\310\22\7\4\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\13\7\1\311\10\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\17\7\1\312\4\7"+
    "\4\0\6\7\1\313\1\0\3\7\5\0\4\7\15\0"+
    "\24\7\4\0\7\7\1\0\3\7\5\0\4\7\15\0"+
    "\15\7\1\314\6\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\11\7\1\315\12\7\4\0\6\7\1\316"+
    "\1\0\3\7\5\0\4\7\15\0\24\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\11\7\1\317\12\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\10\7"+
    "\1\320\13\7\4\0\6\7\1\321\1\0\3\7\5\0"+
    "\4\7\15\0\24\7\4\0\7\7\1\0\3\7\5\0"+
    "\4\7\15\0\11\7\1\322\12\7\4\0\6\7\1\323"+
    "\1\0\3\7\5\0\4\7\15\0\24\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\5\7\1\324\16\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\4\7"+
    "\1\325\17\7\4\0\7\7\1\0\3\7\5\0\4\7"+
    "\15\0\15\7\1\326\6\7\4\0\7\7\1\0\3\7"+
    "\5\0\4\7\15\0\5\7\1\327\16\7\4\0\7\7"+
    "\1\0\3\7\5\0\4\7\15\0\6\7\1\330\15\7"+
    "\4\0\7\7\1\0\3\7\5\0\4\7\15\0\5\7"+
    "\1\331\16\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9405];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\5\1\7\11\2\1\2\11"+
    "\14\1\3\0\1\11\1\0\1\11\2\1\1\0\10\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\11\3\1\3\11"+
    "\23\1\1\0\50\1\2\0\33\1\2\11\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _SliceLexer() {
    this((java.io.Reader)null);
  }


  public _SliceLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _SliceLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1620) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { return ICE_OPEN_GL_MD;
          }
        case 64: break;
        case 51: 
          { return ICE_KW_STRING;
          }
        case 65: break;
        case 21: 
          { return ICE_INTEGER_VALUE;
          }
        case 66: break;
        case 7: 
          { return ICE_BAD_STRING;
          }
        case 67: break;
        case 16: 
          { return ICE_RIGHT_BRACKET;
          }
        case 68: break;
        case 47: 
          { return ICE_KW_CLASS;
          }
        case 69: break;
        case 45: 
          { return ICE_KW_LOCAL;
          }
        case 70: break;
        case 60: 
          { return ICE_KW_DICTIONARY;
          }
        case 71: break;
        case 55: 
          { return ICE_KW_MODULE;
          }
        case 72: break;
        case 43: 
          { return ICE_KW_FLOAT;
          }
        case 73: break;
        case 20: 
          { return ICE_FLOAT_VALUE;
          }
        case 74: break;
        case 5: 
          { return ICE_ID;
          }
        case 75: break;
        case 12: 
          { return ICE_GT;
          }
        case 76: break;
        case 14: 
          { return ICE_RIGHT_BRACE;
          }
        case 77: break;
        case 31: 
          { return ICE_HEXNUMERAL;
          }
        case 78: break;
        case 32: 
          { return ICE_EOL;
          }
        case 79: break;
        case 48: 
          { return ICE_KW_CONST;
          }
        case 80: break;
        case 29: 
          { return ICE_CLOSE_GL_MD;
          }
        case 81: break;
        case 30: 
          { return ICE_NAME_SEPARATOR;
          }
        case 82: break;
        case 33: 
          { return ICE_C_STYLE_COMMENT;
          }
        case 83: break;
        case 54: 
          { return ICE_KW_OBJECT;
          }
        case 84: break;
        case 37: 
          { return ICE_KW_ENUM;
          }
        case 85: break;
        case 35: 
          { return ICE_KW_OUT;
          }
        case 86: break;
        case 19: 
          { return ICE_OCTALNUMERAL;
          }
        case 87: break;
        case 50: 
          { return ICE_KW_THROWS;
          }
        case 88: break;
        case 41: 
          { return ICE_KW_BYTE;
          }
        case 89: break;
        case 17: 
          { return ICE_LEFT_PARENTH;
          }
        case 90: break;
        case 53: 
          { return ICE_NUMBER;
          }
        case 91: break;
        case 8: 
          { return ICE_EQ;
          }
        case 92: break;
        case 39: 
          { return ICE_KW_VOID;
          }
        case 93: break;
        case 59: 
          { return ICE_KW_INTERFACE;
          }
        case 94: break;
        case 26: 
          { return ICE_STRING_LITERAL;
          }
        case 95: break;
        case 42: 
          { return ICE_KW_TRUE;
          }
        case 96: break;
        case 3: 
          { return ICE_DIGIT;
          }
        case 97: break;
        case 9: 
          { return ICE_SEMICOLON;
          }
        case 98: break;
        case 62: 
          { return ICE_KW_IMPLEMENTS;
          }
        case 99: break;
        case 40: 
          { return ICE_KW_BOOL;
          }
        case 100: break;
        case 38: 
          { return ICE_KW_LONG;
          }
        case 101: break;
        case 13: 
          { return ICE_LEFT_BRACE;
          }
        case 102: break;
        case 22: 
          { return ICE_DECIMALNUMERAL;
          }
        case 103: break;
        case 63: 
          { return ICE_KW_LOCAL_OBJECT;
          }
        case 104: break;
        case 49: 
          { return ICE_KW_DOUBLE;
          }
        case 105: break;
        case 34: 
          { return ICE_DOC_STYLE_COMMENT;
          }
        case 106: break;
        case 58: 
          { return ICE_KW_EXCEPTION;
          }
        case 107: break;
        case 11: 
          { return ICE_LT;
          }
        case 108: break;
        case 25: 
          { return ICE_ESCAPE_SEQUENCE;
          }
        case 109: break;
        case 61: 
          { return ICE_KW_IDEMPOTENT;
          }
        case 110: break;
        case 57: 
          { return ICE_KW_SEQUENCE;
          }
        case 111: break;
        case 36: 
          { return ICE_KW_INT;
          }
        case 112: break;
        case 15: 
          { return ICE_LEFT_BRACKET;
          }
        case 113: break;
        case 44: 
          { return ICE_KW_FALSE;
          }
        case 114: break;
        case 6: 
          { return ICE_ASTERISK;
          }
        case 115: break;
        case 18: 
          { return ICE_RIGHT_PARENTH;
          }
        case 116: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 117: break;
        case 56: 
          { return ICE_KW_EXTENDS;
          }
        case 118: break;
        case 10: 
          { return ICE_COMA;
          }
        case 119: break;
        case 46: 
          { return ICE_KW_SHORT;
          }
        case 120: break;
        case 27: 
          { return ICE_DIRECTIVE;
          }
        case 121: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 122: break;
        case 52: 
          { return ICE_KW_STRUCT;
          }
        case 123: break;
        case 24: 
          { return ICE_END_OF_LINE_COMMENT;
          }
        case 124: break;
        case 23: 
          { return ICE_EXPONENTPART;
          }
        case 125: break;
        case 4: 
          { return ICE_HEXDIGIT;
          }
        case 126: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
